#pragma kernel calculateGauss

struct Neuron
{
    float x;
    float y;
    float z; 
    float brightnessContribution;
};

struct Electrode
{
    int electrodeNumber; 
    float x;
    float y;
    float z; 
    float current; 
};
            
int ElectrodeCount;
int NeuronCount; 
float rho;

RWStructuredBuffer<float> NeuronElectrodeGauss : register(u4);

StructuredBuffer<Electrode> Electrodes;
StructuredBuffer<Neuron> Neurons;


[numthreads(1024,1,1)]
void calculateGauss (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NeuronCount) return;

    for (int currentElectrode = 0; currentElectrode < ElectrodeCount; currentElectrode++)
    {
        float distance2 = pow(Neurons[id.x].x-Electrodes[currentElectrode].x,2)
                          + pow(Neurons[id.x].y-Electrodes[currentElectrode].y,2)
                          + pow(Neurons[id.x].z-Electrodes[currentElectrode].z,2);
        
        distance2 = distance2 < 1e-44 ? 1e-44 : distance2;
        
        NeuronElectrodeGauss[id.x * ElectrodeCount + currentElectrode] = exp(-distance2/(2*rho*rho));
    }
}
